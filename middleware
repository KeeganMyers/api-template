use axum::{
    body::{to_bytes, Body},
    extract::{RawQuery, Request, State},
    middleware::Next,
    response::Response,
};
use bytes::Bytes;
use http::{header::AUTHORIZATION, response::Parts};
use model::{cache::CacheLayer, prelude::Cache, AppState};
use std::collections::HashMap;
use util::prelude::*;
use yazi::{compress, decompress, CompressionLevel, Format};

#[derive(Serialize, Deserialize, Clone, Debug)]
struct StoreHeaders {
    headers: HashMap<String, String>,
    status: u16,
}

impl From<Parts> for StoreHeaders {
    fn from(parts: Parts) -> Self {
        let headers = parts
            .headers
            .iter()
            .fold(HashMap::<String, String>::new(), |mut headers, (key, header)| {
                headers.insert(key.to_string(), header.to_str().unwrap_or_default().to_owned());
                headers
            });

        StoreHeaders {
            status: parts.status.as_u16(),
            headers,
        }
    }
}

async fn return_cached_request(path: &str, req_key: &str, app_state: &AppState) -> Result<Response<Body>, AppError> {
    let encoded_response = Cache::get_value(&format!("{}-{}", path, req_key), &app_state.cache).await?;
    let encoded_headers = Cache::get_value(&format!("{}-{}-headers", path, req_key), &app_state.cache).await?;
    let compressed = B64_ENGINE.decode(encoded_response)?;
    let (decoded_response, _checksum) =
        decompress(&compressed, Format::Zlib).map_err(|e| AppError::CompressError(format!("{:?}", e)))?;

    let stored_headers: StoreHeaders = serde_json::from_str(&encoded_headers)?;

    let mut res = Response::builder()
        .status(stored_headers.status)
        .body(Body::from(decoded_response))?;

    *res.headers_mut() = (&stored_headers.headers).try_into()?;
    Ok(res)
}

async fn run_transaction(
    path: &str,
    req_key: &str,
    next: Next,
    cache_ttl: u64,
    req_parts: http::request::Parts,
    req_bytes: Bytes,
    app_state: &AppState,
) -> Result<Response<Body>, AppError> {
    let req = Request::from_parts(req_parts, Body::from(req_bytes));
    let res = next.run(req).await;
    let (res_parts, res_body) = res.into_parts();
    let stored_parts: StoreHeaders = res_parts.clone().into();
    let res_bytes = to_bytes(res_body, usize::MAX).await?;

    let compressed = compress(&res_bytes.clone(), Format::Zlib, CompressionLevel::Default)
        .map_err(|e| AppError::CompressError(format!("{:?}", e)))?;
    let encoded_response = B64_ENGINE.encode(compressed);
    let encoded_headers = serde_json::to_string(&stored_parts)?;
    Cache::set_value(
        &format!("{}-{}", path, req_key),
        &encoded_response,
        &app_state.cache,
        Some(cache_ttl),
    )
    .await?;
    Cache::set_value(
        &format!("{}-{}-headers", path, req_key),
        &encoded_headers,
        &app_state.cache,
        Some(cache_ttl),
    )
    .await?;

    let res = Response::from_parts(res_parts, Body::from(res_bytes));
    Ok(res)
}

pub async fn cache_request(
    State(app_state): State<AppState>,
    query: RawQuery,
    req: Request,
    next: Next,
) -> Result<Response<Body>, AppError> {
    let path = &req.uri().path().to_string();

    if let Some(cache_ttl) = app_state.env.cache_req_ttl {
        log::trace!("caching request on {:?} for {:?}", path, cache_ttl);
        let (req_parts, req_body) = req.into_parts();
        let req_bytes = to_bytes(req_body, usize::MAX).await?;
        let mut auth_header = req_parts.headers.get("x-api-key");
        if auth_header.is_none() {
            auth_header = req_parts.headers.get(AUTHORIZATION);
        }
        let req_str = format!("{:?}{:?}", query, auth_header);
        let req_key = B64_ENGINE.encode(
            compress(req_str.as_bytes(), Format::Zlib, CompressionLevel::Default)
                .map_err(|e| AppError::CompressError(format!("{:?}", e)))?,
        );
        if Cache::value_exists(&format!("{}-{}", path, req_key), &app_state.cache).await? {
            //Occasionally the API pulls values that cannot be converted to string from the cache
            //if this happens instead bypass the cache and run the tx again
            return match return_cached_request(path, &req_key, &app_state).await {
                Ok(res) => Ok(res),
                Err(_) => run_transaction(path, &req_key, next, cache_ttl, req_parts, req_bytes, &app_state).await,
            };
        } else {
            return run_transaction(path, &req_key, next, cache_ttl, req_parts, req_bytes, &app_state).await;
        }
    }

    log::trace!("caching ttl not set running query");
    let res = next.run(req).await;
    Ok(res)
}
